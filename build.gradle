buildscript {
  ext {  springBootVersion = '1.4.0.RELEASE' }
  repositories {
    maven { url "https://plugins.gradle.org/m2/" }
    jcenter()
    mavenCentral()
    maven { url "https://repo.spring.io/milestone" }
    maven { url "https://repo.spring.io/snapshot" }
  }
  dependencies {
    classpath 'org.bouncycastle:bcpkix-jdk15on:1.54'
    classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.5.3"
    classpath 'org.standardout:gradle-versioneye-plugin:1.4.0'
  }
}


plugins {
  id "io.spring.dependency-management" version "0.5.7.RELEASE"
  id "co.riiid.gradle" version "0.4.2"
}

apply plugin: 'io.codearte.nexus-staging'
apply plugin: 'announce'




task wrapper(type: Wrapper) { gradleVersion = '3.0' }

task (printNextVersion) << {
  configurations.archives.allArtifacts.files.filter { !it.name.endsWith('asc') }.files.each { println it }
}

version = 'LOCAL'


// bloody hell this seams way more complicated than it should be
// basically I don't want to set the version manually, partly because
// I'll forget to update it, partly because I'm lazy
//
// 1) I was not able to set the version in a task, because then
// it was be undefined where I need it, so instead I set the version
// once the taskGraph is ready.
//
// 2) The version is simply the last released verison plus 1. To get
// the last released version we search the oss sonatype repo for the
// lastest version of out project. If it doesn't find anything, then
// this must be version 1. Otherwise we'll get back a redirect to
// the lastest version and we can parse it's version out of that. Add
// one and we are done.
//
// 3) We only want to do this if we are uploading artifacts or printing
// the version, otherwise we'll need an internet connection every time
// we do a build. That would suck, so we check what's in the task graph
//
// 4) If we are uploading a snapshot (still need to figure out why we
// would do that) or printing the snapshot version, then we add
// '-SNAPSHOT' to the version.
//
// 5) It's not enough to set the version on the root project, we
// need to iterate over the subprojects, setting the version
// for them as well.
gradle.taskGraph.whenReady {taskGraph ->
  def uploadTasks = taskGraph.getAllTasks().findAll { task -> task.name.startsWith('upload') || task.name.endsWith('githubRelease')  || task.name.endsWith('printVersion') || task.name.endsWith('printSnapshotVersion') }
  if(!uploadTasks.empty) {
    URL url = new URL( "https://oss.sonatype.org/service/local/artifact/maven/redirect?g=${project.group}&a=${project.name}&v=LATEST&r=releases" )
    logger.lifecycle("url: " + url)
    HttpURLConnection conn = url.openConnection();
    conn.setInstanceFollowRedirects(false);
    def code = conn.getResponseCode();
    if( code == 404 ) {
      version = 1
    }
    else {
      String location = conn.getHeaderField("Location")
      logger.debug("latest library location : " + location)
      String currentVersion = location.replaceAll(~/.*-(.*?)\.jar/, '$1')
      logger.debug("currentVersion : " + currentVersion)

      version = Integer.parseInt(currentVersion) + 1
      logger.debug("nextVersion : " + version)
    }
  } else {
    version = 'LOCAL'
  }
  def snapshotTasks = taskGraph.getAllTasks().findAll { task -> task.name.startsWith('uploadSnapshot') || task.name.endsWith('printSnapshotVersion') }
  if(!snapshotTasks.empty) {
    version = version + "-SNAPSHOT"
  }

  logger.lifecycle("${rootProject.name} version: " + rootProject.version)
  subprojects.each {
    it.version =  rootProject.version
  }
}

allprojects {
  apply plugin: 'eclipse'
  apply plugin: 'idea'
  apply plugin: 'maven'

  group = "au.com.mountain-pass"

  ext{
    qaReportsDir = file("${buildDir}/test-results")
  }

  repositories {
    jcenter()
    mavenCentral()
    maven { url "https://repo.spring.io/milestone" }
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "http://dl.bintray.com/typesafe/maven-releases" }
  }


  configurations {
    providedRuntime
    codacy
  }

  task printVersion << { println "${project.name} version: ${version}" }
  task printSnapshotVersion << { println "${project.name} snapshot version: ${version}" }
}

subprojects {
  apply plugin: 'signing'
  apply plugin: 'java'
  apply plugin: 'spring-boot'
  apply plugin: 'io.spring.dependency-management'
  apply plugin: 'jacoco'
  apply plugin: 'org.standardout.versioneye'
  apply plugin: 'findbugs'
  apply plugin: 'checkstyle'
  apply plugin: 'pmd'
  apply plugin: 'jdepend'







  compileJava.options.compilerArgs.add '-parameters'
  compileTestJava.options.compilerArgs.add '-parameters'


  jar { baseName = "${archivesBaseName}" }

  sourceCompatibility = 1.8
  targetCompatibility = 1.8


  dependencies {
    codacy group: 'com.codacy', name: 'codacy-coverage-reporter', version: '1.0.10'

    checkstyle 'com.puppycrawl.tools:checkstyle:7.1'
    jdepend 'org.apache.ant:ant-jdepend:1.9.7'
    pmd 'net.sourceforge.pmd:pmd-java:5.5.1'
  }


  eclipse {
    classpath { containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER') }
  }

  eclipseProject {
    doLast {
      // https://discuss.gradle.org/t/how-to-write-properties-to-3rd-party-eclipse-settings-files/6499/2

      def props = new Properties()
      file(".settings/org.eclipse.jdt.core.prefs").withInputStream { stream ->
        props.load(stream)
      }
      props.setProperty("org.eclipse.jdt.core.compiler.codegen.methodParameters", "generate")
      file(".settings/org.eclipse.jdt.core.prefs").withOutputStream { stream ->
        props.store(stream, null)
      }
    }
  }



  task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
  }

  task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
  }



  test { enabled = false }


  task unitTest(type: Test) {
    testClassesDir = sourceSets.test.output.classesDir
    classpath = sourceSets.test.runtimeClasspath
    ext.outputDir = "${buildDir}/test-results"
    outputs.dir file(outputDir)
    reports.junitXml.destination = file("${outputDir}/${name}/junit")
    reports.html.destination = file("${outputDir}/${name}/junit/html")
    binResultsDir = file("${outputDir}/${name}/junit/binary")
    jacoco {
      append = false
      destinationFile = file("${outputDir}/${name}/jacoco/${name}.exec")
    }
    systemProperty 'cucumber.options',  "--tags ~@skip-local --plugin json:${outputDir}/${name}/bdd/${archivesBaseName}.json --plugin html:${outputDir}/${name}/bdd/html --plugin junit:${outputDir}/${name}/bdd/TEST-${archivesBaseName}.xml"
  }


  task integrationTest(type: Test) {
    testClassesDir = sourceSets.test.output.classesDir
    classpath = sourceSets.test.runtimeClasspath
    ext.outputDir = "${buildDir}/test-results"
    outputs.dir file(outputDir)
    reports.junitXml.destination = file("${outputDir}/${name}/junit")
    reports.html.destination = file("${outputDir}/${name}/junit/html")
    binResultsDir = file("${outputDir}/${name}/junit/binary")
    jacoco {
      append = false
      destinationFile = file("${outputDir}/${name}/jacoco/${name}.exec")
    }
    systemProperty 'cucumber.options',  "--plugin json:${outputDir}/${name}/bdd/${archivesBaseName}.json --plugin html:${outputDir}/${name}/bdd/html --plugin junit:${outputDir}/${name}/bdd/TEST-${archivesBaseName}.xml"
    systemProperty 'spring.profiles.active', 'integration'
  }

  task uiIntegrationTest(type: Test) {
    testClassesDir = sourceSets.test.output.classesDir
    classpath = sourceSets.test.runtimeClasspath
    ext.outputDir = "${buildDir}/test-results"
    outputs.dir file(outputDir)
    reports.junitXml.destination = file("${outputDir}/${name}/junit")
    reports.html.destination = file("${outputDir}/${name}/junit/html")
    binResultsDir = file("${outputDir}/${name}/junit/binary")
    jacoco {
      append = false
      destinationFile = file("${outputDir}/${name}/jacoco/${name}.exec")
    }
    systemProperty 'cucumber.options',  "--plugin json:${outputDir}/${name}/bdd/${archivesBaseName}.json --plugin html:${outputDir}/${name}/bdd/html --plugin junit:${outputDir}/${name}/bdd/TEST-${archivesBaseName}.xml"
    systemProperty 'spring.profiles.active', 'ui-integration'
  }

  test.dependsOn {
    tasks.findAll { task -> task.name.endsWith('Test') }
  }

  tasks.withType(Test) {
    scanForTestClasses = false
    include "**/*Tests.class" // whatever Ant pattern matches your test class files
  }

  jacoco {
    toolVersion = "0.7.7.201606060606"
    reportsDir = file("${buildDir}/test-results/jacoco")
  }



  jacocoTestReport {
    executionData = fileTree(dir: "${buildDir}", include: '**/jacoco/*.exec')

    reports {
      xml.enabled true
      xml.destination "${buildDir}/test-results/jacoco/${archivesBaseName}.xml"
      csv.enabled false
      html.enabled true
      html.destination "${buildDir}/test-results/jacoco/html"
    }

    doLast {
      def report = reports.xml.destination
      logger.lifecycle("Checking coverage results: ${report}")

      def parser = new XmlParser()
      parser.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false);
      parser.setFeature("http://apache.org/xml/features/disallow-doctype-decl", false)
      def results = parser.parse(report)

      def percentage = {
        if( it == null ) {
          return 100
        }
        def covered = it.'@covered' as Double
        def missed = it.'@missed' as Double
        ((covered / (covered + missed)) * 100).round(2)
      }

      def counters = results.counter
      def metrics = [:]
      metrics << [
        'instruction': percentage(counters.find { it.'@type'.equals('INSTRUCTION') }),
        'branch'     : percentage(counters.find { it.'@type'.equals('BRANCH') }),
        'line'       : percentage(counters.find { it.'@type'.equals('LINE') }),
        'complexity' : percentage(counters.find { it.'@type'.equals('COMPLEXITY') }),
        'method'     : percentage(counters.find { it.'@type'.equals('METHOD') }),
        'class'      : percentage(counters.find { it.'@type'.equals('CLASS') })
      ]


      def failures = []
      def success = []
      metrics.each {
        def limit = limits[it.key]
        if (it.value < limit) {
          failures.add("- ${it.key} coverage rate is: ${it.value}%, minimum is ${limit}%")
        }
        else {
          success.add("- ${it.key} coverage rate is: ${it.value}%, minimum is ${limit}%")
        }
      }

      logger.quiet("------------------ Code Coverage Passes -----------------------")
      success.each { logger.quiet(it) }
      logger.quiet("---------------------------------------------------------------")
      if (failures) {
        logger.quiet("------------------ Code Coverage Failed -----------------------")
        failures.each { logger.quiet(it) }
        logger.quiet("---------------------------------------------------------------")
        throw new GradleException("Code coverage failed")
      } else{
        logger.quiet("Passed Code Coverage Checks")
      }
    }
  }



  check.dependsOn jacocoTestReport

  task qaReportsJar(type: Jar, dependsOn : check) {
    classifier = 'qaReports'
    from file("${buildDir}/test-results")
  }

  artifacts {
    archives jar, javadocJar, sourcesJar, qaReportsJar
  }


  bootRepackage { enabled = false }

  findbugs {
    ignoreFailures = true
    toolVersion = "3.0.1"
    sourceSets = [sourceSets.main]
    reportsDir = file("$qaReportsDir/findbugs")
    effort = "max"
    reportLevel = "low"
  }


  tasks.withType(FindBugs) {
    reports {
      xml.enabled false
      html.enabled true
      //html.stylesheet resources.text.fromFile('config/xsl/findbugs-custom.xsl')
    }
  }

  task uploadCoverageToCodacy(type: JavaExec, dependsOn : jacocoTestReport) {
    main = "com.codacy.CodacyCoverageReporter"
    classpath = configurations.codacy
    args = [
      "-l",
      "Java",
      "-r",
      "${buildDir}/test-results/jacoco/${archivesBaseName}.xml"
    ]
  }

  task (codacyDepsize) << {
    def size = 0;
    configurations.codacy.collect { it.length() / (1024 * 1024) }.each { size += it }
    println "Total dependencies size: ${Math.round(size * 100) / 100} Mb"

    configurations
        .codacy
        .sort { -it.length() }
        .each { println "${it.name} : ${Math.round(it.length() / (1024) * 100) / 100} kb" }
  }

  task (codacyLocs) << {
    configurations.codacy.each {
      String jarName = it
      println jarName
    }
  }


  checkstyle {
    ignoreFailures=true
    configFile=file("${rootProject.projectDir}/config/checkstyle/checkstyle.xml")
    reportsDir=file("$qaReportsDir/checkstyle")
  }

  tasks.withType(Checkstyle) {
    reports {
      xml.enabled true
      //html.enabled true
      //html.stylesheet resources.text.fromFile("${rootProject.projectDir}/config/checkstyle/checkstyle.xsl")
    }
  }

  pmd {
    ruleSets = [
      "java-basic",
      "java-braces"
    ]
    ignoreFailures=true
    reportsDir=file("$qaReportsDir/pmd")
  }

  jdepend {
    ignoreFailures=true
    reportsDir=file("$qaReportsDir/jdepend")

  }

  signing {
    required { gradle.taskGraph.hasTask(":uploadArchives") }
    sign jar, javadocJar, sourcesJar, qaReportsJar
  }

  task (listArchives) << {
    configurations.archives.allArtifacts.files.filter { !it.name.endsWith('asc') }.files.each { println it }
  }

  task uploadSnapshotArchives() << { }

  uploadSnapshotArchives.finalizedBy uploadArchives

  uploadArchives {
    repositories {
      mavenDeployer {
        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

        repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2") {
          authentication(userName: project.hasProperty('ossrhUsername') ? project.getProperty('ossrhUsername') : '', password: project.hasProperty('ossrhPassword') ? project.getProperty('ossrhPassword') : '')
        }

        snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots") {
          authentication(userName: project.hasProperty('ossrhUsername') ? project.getProperty('ossrhUsername') : '', password: project.hasProperty('ossrhPassword') ? project.getProperty('ossrhPassword') : '')
        }

        pom.project {
          name 'hyperstate'
          packaging 'jar'
          // optionally artifactId can be defined here
          description 'A Hypermedia as the Engine of Application State (HATEOAS) library'
          url 'https://github.com/mountain-pass/hyperstate'

          scm {
            connection 'scm:git:https://github.com/mountain-pass/hyperstate'
            developerConnection 'scm:git:https://github.com/mountain-pass/hyperstate'
            url 'https://github.com/mountain-pass/hyperstate'
          }

          licenses {
            license {
              name 'The Apache License, Version 2.0'
              url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            }
          }

          developers {
            developer {
              id 'tompahoward'
              name 'Tom Howard'
              email 'tom@windyroad.com.au'
            }
          }
        }
      }
    }
  }


}

nexusStaging {
  username = project.hasProperty('ossrhUsername') ? project.getProperty('ossrhUsername') : ''
  password = project.hasProperty('ossrhPassword') ? project.getProperty('ossrhPassword') : ''
  numberOfRetries = 10
  delayBetweenRetriesInMillis = 5000
}

github {
  owner = 'mountain-pass'
  repo = 'hyperstate'
  token = project.hasProperty('githubToken') ? project.getProperty('githubToken') : 'NOTSET'
  tagName = "${version}"
  targetCommitish = 'master'
  name = "v${version}"
  body = """Release"""
  assets = subprojects.configurations.archives.allArtifacts.files.collect { it.filter { !it.name.endsWith('asc') } }.files.flatten()
  prerelease = true
  draft = true
}

task printAssets << {
  logger.lifecycle("assets : ${project.github.assets}" )
}


tasks.getByName("githubRelease") {
  doFirst {
    project.github.tagName = version
    project.github.name = "v${version}"
    logger.info("TAG: ${project.github.tagName}") 
    logger.info("NAME: ${project.github.name}")
    logger.info("Assests: ${project.github.assets}")
  }
}

closeAndPromoteRepository.finalizedBy githubRelease


//versioneye {
//  includeSubProjects = true
// need to test the following option
//dependencies = transitive
//}


project(":hyperstate-core"){
  archivesBaseName = "hyperstate-core"

  ext{
    // TODO: Increase these
    limits = [
      'instruction': 0,
      'branch'     : 0,
      'line'       : 0,
      'complexity' : 0,
      'method'     : 0,
      'class'      : 0
    ]
  }


  dependencies {
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-hateoas")
    compile("com.fasterxml.jackson.core:jackson-core:2.8.0")
    compile('com.fasterxml.jackson.core:jackson-annotations:2.8.0')
    compile('com.google.guava:guava:19.0')
    compile("org.springframework.boot:spring-boot-starter-data-jpa")
    compile("org.eclipse.jdt:org.eclipse.jdt.annotation:2.0.0")
    compile 'org.apache.commons:commons-lang3:3.4'
    compile group: 'com.github.spullara.mustache.java', name: 'compiler', version:'0.9.3'
    

  }

}

project(":hyperstate-server"){


  archivesBaseName = "hyperstate-server"

  ext{
    // TODO: Increase these
    limits = [
      'instruction': 0,
      'branch'     : 0,
      'line'       : 0,
      'complexity' : 0,
      'method'     : 0,
      'class'      : 0
    ]
  }


  dependencies {

    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-actuator")
    compile("org.springframework.boot:spring-boot-starter-aop")
    compile("org.springframework.boot:spring-boot-starter-hateoas")

    compile("org.eclipse.jdt:org.eclipse.jdt.annotation:2.0.0")

    compile("com.fasterxml.jackson.core:jackson-core:2.8.1")
    compile('com.fasterxml.jackson.core:jackson-annotations:2.8.1')

    compile('org.apache.httpcomponents:httpasyncclient:4.1.2')
    compile('commons-codec:commons-codec:1.10')

    compile("org.webjars:bootstrap:3.3.7-1") // when updating, don't forget to update index.html
    compile("org.webjars:jquery:3.1.0") // when updating, don't forget to update index.html
    compile 'org.webjars.bower:angularjs:1.5.8' // when updating, don't forget to update index.html

    compile project(":hyperstate-core")

    providedRuntime("org.springframework.boot:spring-boot-starter-tomcat")

    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile "info.cukes:cucumber-java:1.2.4","info.cukes:cucumber-junit:1.2.4","info.cukes:cucumber-spring:1.2.4"

    testCompile group: 'org.exparity', name: 'hamcrest-date', version: '2.0.4'
    testCompile group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: '2.8.1'

    //compile('org.flywaydb:flyway-core')
    testCompile("com.h2database:h2:1.4.192")


    testCompile project(":hyperstate-client")
    testCompile project(":hyperstate-client-webdriver")
    testCompile project(":hyperstate-repository-memory")
    testCompile project(":hyperstate-cert")

  }


}

project(":hyperstate-client"){
  archivesBaseName = "hyperstate-client"
  ext{
    // TODO: Increase these
    limits = [
      'instruction': 0,
      'branch'     : 0,
      'line'       : 0,
      'complexity' : 0,
      'method'     : 0,
      'class'      : 0
    ]
  }
  dependencies {  compile project(":hyperstate-core")     }
}

project(":hyperstate-client-webdriver"){
  archivesBaseName = "hyperstate-client-webdriver"
  ext{
    // TODO: Increase these
    limits = [
      'instruction': 0,
      'branch'     : 0,
      'line'       : 0,
      'complexity' : 0,
      'method'     : 0,
      'class'      : 0
    ]
  }
  dependencies {
    compile 'org.seleniumhq.selenium:selenium-java:2.53.1'
    compile project(":hyperstate-client")

  }
}

project(":hyperstate-repository-memory"){
  archivesBaseName = "hyperstate-repository-memory"
  ext{
    // TODO: Increase these
    limits = [
      'instruction': 0,
      'branch'     : 0,
      'line'       : 0,
      'complexity' : 0,
      'method'     : 0,
      'class'      : 0
    ]
  }
  dependencies {
    compile("org.springframework.boot:spring-boot-starter")
    compile project(":hyperstate-core")


  }
}

project(":hyperstate-cert"){
  archivesBaseName = "hyperstate-cert"
  ext{
    // TODO: Increase these
    limits = [
      'instruction': 0,
      'branch'     : 0,
      'line'       : 0,
      'complexity' : 0,
      'method'     : 0,
      'class'      : 0
    ]
  }
  dependencies {
    compile 'org.bouncycastle:bcpkix-jdk15on:1.54'
    compile("org.springframework.boot:spring-boot-starter")
    compile("org.springframework.boot:spring-boot-starter-logging")
  }
}


gradle.taskGraph.afterTask { Task task, TaskState state ->
  if (state.failure) {
    announce.announce("'${task.path}' FAILED", "local")
  }
  else {
    announce.announce("'${task.path}' succeeded", "local")
  }
}
